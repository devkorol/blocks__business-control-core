@startuml
!pragma useVerticalIf on

start
:Start evaluating business control over request;

floating note left #lightgrey: Gather settings for business control;
group Settings
  :Invoke settings provider;
  -> code, flow code and date;

  if (Custom settings provider exist) is (true) then
    :Call custom provider;
    note right: Have a look to implement \n[[https://github.com/devkorol/blocks__business-control-core/blob/main/src/main/java/com/github/devkorol/blocks/business/control/core/execution/settings/provider/BusinessControlSettingsProvider.java BusinessControlSettingsProvider]]
  else
    :By default return settings from a properties file;
  endif
-> business control settings;
end group

:Keep settings for further evaluation;

floating note left #lightgrey: Evaluate the ability to perform buisness control\nusing a chain of filters;
group Filter chain
  :Get filters list;
  -> initial request,\nbusiness control settings;
  note right: You can add custom filters \nby implementing [[https://github.com/devkorol/blocks__business-control-core/blob/main/src/main/java/com/github/devkorol/blocks/business/control/core/execution/filter/processor/BusinessControlFilterProcessor.java BusinessControlFilterProcessor]]
  while (For each filter in list)
    :Invoke filter;
    if (Control is active by filter?) then (false)
      :Stop on first [false] result;
      break
    endif
  backward :Go to the next filter;
  endwhile (All filters\nwas invoked)

  if (Filter result is [null]) then (true)
    :Set filter default result from properties;
  endif
end group

if (Filter result) then (true)
  :Proceed to the next steps;
else
  :Stop business control evaluating;
  -> empty report;
  end
endif

floating note left #lightgrey: Gather params for business control;
group Params
  :Invoke params provider;
  -> code, flow code and date;

  if (Custom params provider exist) is (true) then
    :Call params provider;
    note right: Have a look to implement \n[[https://github.com/devkorol/blocks__business-control-core/blob/main/src/main/java/com/github/devkorol/blocks/business/control/core/execution/param/provider/BusinessControlParamProvider.java BusinessControlParamProvider]]
  else
    :By default return empty params;
  endif
end group

:keep params for later business control invocation;


floating note left #lightgrey: Find business control bean model in context;
group Bean locator
  :Invoke business control locator;
  -> code, flow code;

  while (For each registered bean)
    if (Code equals) then (true)
      if (Flow code equals by link) then (true)
        :Set found business control bean;
        break;
      elseif (Flow code not [null] \nand equals ignore case) then (true)
        :Set found business control bean;
        break;
      elseif (Bean flow code is [null]) then (true)
        :Keep nulled flow code bean\nfor further decision making;
      endif
    endif
  backward :Go to the next bean;
  endwhile (no more registered beans)

  :Check result of finding business control bean;
  if (Found bean is [null]\nand exist nulled flow code bean) then (true)
    :Set nulled flow code bean as suitable for this request;
  endif
end group

:keep business control bean model;

floating note left #lightgrey: Find suitable metamodel for business control\napplying to request model;
group Metamodel lookup
  :Invoke metamodel locator;
  -> request model, business control bean model;

  while (For each metamodel in business control bean model)
    if (Request model class equals supported by metamodel) then (true)
      :Set found metamodel;
      break;
    elseif (Request model class extends supported by metamodel)
      :Keep non-exact metamodel for further decision making;
    endif

  backward: Go to the next;
  endwhile (no more metamodels for bean)

  :Check result of finding metamodel;
  if (Found metamodel is [null]) then (true)
    :Set metamodel for superclass as suitable for this request;
  endif
end group

:keep arg metamodel for argument processing;

floating note left #lightgrey: Gather arguments from input model\nby arg metamodel;
group Argument accessor
  :Invoke argument accessor;
  -> request model, arg metamodel;
  :Get arguments from metamodel;

  while (For each argument in metamodel)
     :Get argument path;
     :Evaluate SPeL path over input model;
     :Build argument model;
  backward: Go to the next argument;
  endwhile (no more arguments)
  :Collect argument models to list;
end group

:keep argument models for business control invociation;

floating note left #lightgrey: Invoke business control bean with\nsettings, params, arguments, request;
group Invoke
  :Prepare arguments and model for business control invoking;
  :Invoke business control bean method;
  :Retrieve evaluation report;
end group

:keep business control report;

floating note left #lightgrey: Build business control mismatch report;
group Mismatch builder
  if (Mismatch report is present) then (true)
    :Create mismatch element;
    :Set code and criticality from settings;
    :Invoke message formatter;

    if (Custom message formatter exist) is (true) then
      :Call message formatter;
      note right: Have a look to implement \n[[https://github.com/devkorol/blocks__business-control-core/blob/main/src/main/java/com/github/devkorol/blocks/business/control/core/execution/mismatch/message/BusinessControlMismatchMessageFormatter.java BusinessControlMismatchMessageFormatter]]
    else
      :By default uses [[https://handlebarsjs.com/ handlebars]]\nmessage formater;
    endif

    :fill mismatch elements mode from properties;
    if (SPECIFIED is selected) then (true)
      :Add to mismatch elements only \nspecified in business control\nreport arguments;
    elseif (ALL is selected) then (true)
      :Add to mismatch elements all \narguments from metamodel;
    elseif (MIXED is selected) then (true)
       if (invalid arguments was provided\nin business control report) then (true)
          :Add to mismatch elements only\nspecified arguments;
        else
          :Add to mismatch elements all\narguments from metamodel;
      endif
    elseif (NONE is selected) then (true)
      :Leave mismatch elements empty;
    endif
  endif
end group

:return optional business control mismatch;

stop
@enduml
